sensor:

  # pfSense Uptime
  - platform: snmp
    name: pfSense Uptime Raw
    host: !secret pfsense_ip
    community: !secret pfsense_snmp
    baseoid: .1.3.6.1.2.1.1.3.0
  - platform: template
    sensors:
      pfsense_uptime:
        friendly_name: pfSense Uptime
        icon_template: mdi:timer
        value_template: >
          {% if states.sensor.pfsense_uptime_raw.state|int != 0 %}
            {%- set uptime  = ((states.sensor.pfsense_uptime_raw.state)|float)/100/60 -%}
            {%- set sep     = ', ' -%}
            {%- set TIME_MAP = {
                'week': (uptime / 10080) % 10080,
                'day': (uptime / 1440) % 7,
                'hour': (uptime / 60) % 24,
              'minute': (uptime % 60)
            }
            -%}

            {%- for unit, duration in TIME_MAP.items() if duration >= 1 -%}
              {%- if not loop.first -%}
                {{ sep }}
              {%- endif -%}
                
              {{ (duration | string).split('.')[0] }} {{ unit }}

              {%- if duration >= 2 -%}
                s
              {%- endif -%}
            {%- endfor -%}

            {%- if uptime < 1 -%}
              just now
            {%- endif -%}
          {% endif %}
      pfsense_boottime:
        friendly_name: pfSense Boot Time
        icon_template: mdi:timer
        device_class: timestamp
        value_template: >
          {% if states.sensor.pfsense_uptime_raw.state|int > 0 %}
            {{ (as_timestamp(now()) - (states.sensor.pfsense_uptime_raw.state| int)/100) | timestamp_custom("%Y-%m-%d %H:%M:%S") }}
          {% else %}
            unavailable
          {% endif %}

  # Traffic (from https://www.reddit.com/r/homeassistant/comments/gl16ql/monitoring_pfsense_bandwidth_snmp_counter_to/fqv6sd4/)
  # -- Define the raw SNMP counters
  - platform: snmp
    name: pfSense NIC WAN In Counter Raw
    host: !secret pfsense_ip
    community: !secret pfsense_snmp
    baseoid: 1.3.6.1.2.1.2.2.1.10.1
  - platform: snmp
    name: pfSense NIC WAN Out Counter Raw
    host: !secret pfsense_ip
    community: !secret pfsense_snmp
    baseoid: 1.3.6.1.2.1.2.2.1.16.1
  # -- Define the statistics enabled counters
  - platform: statistics
    name: pfSense NIC WAN In Counter
    entity_id: sensor.pfsense_nic_wan_in_counter_raw
    sampling_size: 2
    max_age:
      minutes: 5
  - platform: statistics
    name: pfSense NIC WAN Out Counter
    entity_id: sensor.pfsense_nic_wan_out_counter_raw
    sampling_size: 2
    max_age:
      minutes: 5
  # -- Define the actual sensor templates you'll use
  - platform: template
    sensors:
      pfsense_nic_wan_in_mbps:
        icon_template: mdi:cloud-download-outline
        friendly_name: 'pfsense WAN Traffic In'
        unit_of_measurement: 'Mbps'
        # entity_id: sensor.pfsense_nic_wan_in_counter
        value_template: >
          {% if states.sensor.pfsense_nic_wan_in_counter.state|int > 0 %}
            {% if state_attr('sensor.pfsense_nic_wan_in_counter','change_rate') > 0 %}
              {{ (((state_attr('sensor.pfsense_nic_wan_in_counter','change_rate')|float)*8)/1000000)|round(2) }}
            {% else  %}
              0
            {% endif %}
          {% else  %}
            0
          {% endif %}
      pfsense_nic_wan_out_mbps:
        icon_template: mdi:cloud-upload-outline
        friendly_name: 'pfsense WAN Traffic Out'
        unit_of_measurement: 'Mbps'
        # entity_id: sensor.pfsense_nic_wan_out_counter
        value_template: >
          {% if states.sensor.pfsense_nic_wan_out_counter.state|int > 0 %}
            {% if state_attr('sensor.pfsense_nic_wan_out_counter','change_rate') > 0 %}
              {{ (((state_attr('sensor.pfsense_nic_wan_out_counter','change_rate')|float)*8)/1000000)|round(2) }}
            {% else  %}
              0
            {% endif %}
          {% else  %}
            0
          {% endif %}

  # Internet usage
  - platform: cox_sensor
    username: !secret cox_username
    password: !secret cox_password
  # https://github.com/dejanzelic/coxusage-docker
  # - platform: file
  #   name: Cox Usage
  #   file_path: /config/coxusage.json
  #   value_template: '{{ value_json.dumUsage }}'
  #   unit_of_measurement: GB
  # - platform: file
  #   name: Cox Limit
  #   file_path: /config/coxusage.json
  #   value_template: '{{ value_json.dumLimit }}'
  #   unit_of_measurement: GB
  # - platform: file
  #   name: Cox Utilization
  #   file_path: /config/coxusage.json
  #   value_template: '{{ value_json.dumUtilization }}'
  #   unit_of_measurement: '%'
  # - platform: file
  #   name: Cox Days Left
  #   file_path: /config/coxusage.json
  #   value_template: '{{ value_json.dumDaysLeft }}'
  #   unit_of_measurement: days

  # WAN IP
  - platform: dnsip
    name: WAN IPv4
  # - platform: dnsip
  #   name: WAN IPv6
  #   ipv6: true
  
  # Zeus
  - platform: template
    sensors:
      zeus_net_in:
        friendly_name: Zeus Network In
        unit_of_measurement: Mbps
        value_template: "{{ (states('sensor.zeus_network_0_bps_received')|float/1000000)|round(2) }}"
        icon_template: mdi:download-network-outline
      zeus_net_out:
        friendly_name: Zeus Network Out
        unit_of_measurement: Mbps
        value_template: "{{ (states('sensor.zeus_network_0_bps_sent')|float/1000000)|round(2) }}"
        icon_template: mdi:upload-network-outline

