## WARNING ##
# This file is automatically generated, any changes
# will be overwritten.

##################################################
################  COMMON ENTITIES  ###############
##################################################

###############  input_boolean:  #################
input_boolean:
  front_lock_notifications:
    name: front Lock Notifications
  front_dooraccess_notifications:
    name: front Door Notifications
  front_garageacess_notifications:
    name: front Garage Notifications
  front_reset_lock:
    name: front reset lock
  keymaster_front_autolock:
    name: "Auto Lock Enabled"
    icon: mdi:key-remove
  keymaster_front_retry:
    name: "Auto Lock Enabled"

###################  script:  ####################
script:
  keymaster_front_reset_lock:
    sequence:
      - service: script.keymaster_front_manual_notify
        data_template:
          title: "reset"
          message: "front"

  keymaster_front_reset_codeslot:
    mode: parallel
    fields:
      code_slot:
        description: The code slot to reset
        example: 1
    variables:
      # Constant used later to loop through day specific entities
      days: ["sun", "mon", "tue", "wed", "thu", "fri", "sat"]
    sequence:
      - service: input_boolean.turn_off
        data_template:
          entity_id: "input_boolean.enabled_front_{{ code_slot | string }}"
      - service: input_text.set_value
        data_template:
          entity_id: "input_text.front_name_{{ code_slot | string }}"
          value: ""
      - service: input_text.set_value
        data_template:
          entity_id: "input_text.front_pin_{{ code_slot | string }}"
          value: ""
      - service: input_boolean.turn_off
        data_template:
          entity_id: "input_boolean.notify_front_{{ code_slot | string }}"
      - service: input_number.set_value
        data_template:
          entity_id: "input_number.accesscount_front_{{ code_slot | string }}"
          value: "0"
      - service: input_datetime.set_datetime
        data_template:
          entity_id: "input_datetime.start_date_front_{{ code_slot | string }}"
          datetime: >-
            {{ now().strftime('%Y-%m-%d 00:00') }}
      - service: input_datetime.set_datetime
        data_template:
          entity_id: "input_datetime.end_date_front_{{ code_slot | string }}"
          datetime: >-
            {{ now().strftime('%Y-%m-%d 00:00') }}
      - service: input_boolean.turn_off
        data_template:
          entity_id: "input_boolean.daterange_front_{{ code_slot | string }}"
      - service: input_boolean.turn_off
        data_template:
          entity_id: "input_boolean.accesslimit_front_{{ code_slot | string }}"
      - service: input_boolean.turn_off
        data_template:
          entity_id: "input_boolean.reset_codeslot_front_{{ code_slot | string }}"
      # Loop through each day of the week and reset the entities related to each one
      - repeat:
          count: 7
          sequence:
            - service: input_datetime.set_datetime
              data_template:
                entity_id: "input_datetime.{{ days[repeat.index - 1] }}_start_date_front_{{ code_slot | string }}"
                time: "{{ now().replace(hour=00,minute=00,second=00).strftime('%H:%M:%S') }}"
            - service: input_datetime.set_datetime
              data_template:
                entity_id: "input_datetime.{{ days[repeat.index - 1] }}_end_date_front_{{ code_slot | string }}"
                time: "{{ now().replace(hour=00,minute=00,second=00).strftime('%H:%M:%S') }}"
            - service: input_boolean.turn_on
              data_template:
                entity_id: "input_boolean.{{ days[repeat.index - 1] }}_front_{{ code_slot | string }}"
            - service: input_boolean.turn_on
              data_template:
                entity_id: "input_boolean.{{ days[repeat.index - 1] }}_inc_front_{{ code_slot | string }}"

  keymaster_front_start_timer:
    sequence:
      - condition: state
        entity_id: input_boolean.keymaster_front_autolock
        state: "on"
      - condition: state
        entity_id: lock.front
        state: "unlocked"
      - service: timer.cancel
        entity_id: timer.keymaster_front_autolock
      - service: timer.start
        data_template: # if next_dusk happens sooner than next_dawn, then it's daylight
          entity_id: timer.keymaster_front_autolock
          duration: >
            {% if (((as_timestamp(states.sun.sun.attributes.next_dusk)) > (as_timestamp(states.sun.sun.attributes.next_dawn)))) %}
              {{ states('input_text.keymaster_front_autolock_door_time_night')}}
            {% else %}
              {{ states('input_text.keymaster_front_autolock_door_time_day')}}
            {% endif %}

  boltchecked_lock_front:
    sequence:
      - service: lock.lock
        data:
          entity_id: lock.front

  boltchecked_retry_front:
    sequence:
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.keymaster_front_retry
      - service: persistent_notification.create
        data_template:
          title: "Unable to lock front"
          message: >-
            {{ 'Unable to lock front as the sensor indicates the door is currently opened.  The operation will be automatically retried when the door is closed.'}}

###################  automation:  ####################
automation:
  - alias: keymaster_front Reset Code Slot
    id: keymaster_front Reset Code Slot
    trigger:
      entity_id: input_boolean.reset_codeslot_front_1,input_boolean.reset_codeslot_front_2,input_boolean.reset_codeslot_front_3,input_boolean.reset_codeslot_front_4,input_boolean.reset_codeslot_front_5,input_boolean.reset_codeslot_front_6,input_boolean.reset_codeslot_front_7,input_boolean.reset_codeslot_front_8,input_boolean.reset_codeslot_front_9,input_boolean.reset_codeslot_front_10
      platform: state
      to: "on"
    action:
      - service: script.keymaster_front_reset_codeslot
        data_template:
          code_slot: "{{ trigger.entity_id.split('_')[-1] }}"

  - alias: keymaster_front Lock Notifications
    id: keymaster_front Lock Notifications
    trigger:
      platform: event
      event_type: keymaster_lock_state_changed
      event_data:
        lockname: front
    condition:
      - condition: state
        entity_id: input_boolean.front_lock_notifications
        state: "on"
    action:
      - service: script.keymaster_front_manual_notify
        data_template:
          title: front
          message: "{{ trigger.event.data.action_text }} {% if trigger.event.data.code_slot > 0 %}({{ trigger.event.data.code_slot_name }}){% endif %}"

  - alias: keymaster_front User Notifications
    id: keymaster_front User Notifications
    trigger:
      platform: event
      event_type: keymaster_lock_state_changed
      event_data:
        lockname: front
    condition:
      - condition: template
        value_template: "{{ trigger.event.data.code_slot > 0 }}"
      - condition: template
        value_template: "{{ is_state('input_boolean.notify_front_' + trigger.event.data.code_slot | string, 'on') }}"
      - condition: state
        entity_id: input_boolean.front_lock_notifications
        state: "off"
    action:
      - service: script.keymaster_front_manual_notify
        data_template:
          title: front
          message: "{{ trigger.event.data.action_text }} ({{ trigger.event.data.code_slot_name }})"

  - alias: keymaster_front Door Open and Close
    id: keymaster_front Door Open and Close
    trigger:
      entity_id: binary_sensor.door_front
      platform: state
    condition:
      - condition: state
        entity_id: "input_boolean.front_dooraccess_notifications"
        state: "on"
      - condition: template
        value_template: "{{ trigger.from_state.state in ('on', 'off') and trigger.to_state.state in ('on', 'off') }}"
    action:
      - service: script.keymaster_front_manual_notify
        data_template:
          title: front
          message: "{% if trigger.to_state.state == 'on' %}Door Opened{% else %}Door Closed{% endif %}"

  - alias: keymaster_front Changed Code
    id: keymaster_front Changed Code
    trigger:
      entity_id: input_text.front_pin_1,input_text.front_pin_2,input_text.front_pin_3,input_text.front_pin_4,input_text.front_pin_5,input_text.front_pin_6,input_text.front_pin_7,input_text.front_pin_8,input_text.front_pin_9,input_text.front_pin_10
      platform: state
    condition:
      - condition: template
        value_template: >-
          {{
            is_state('input_boolean.enabled_front_' + trigger.entity_id.split('_')[-1], 'on')
            and
            (trigger.from_state.state != trigger.to_state.state)
          }}
    action:
      - service: persistent_notification.create
        data_template:
          title: front LOCK MANAGER
          message: >-
            {{ 'You changed the PIN for front code slot ' + trigger.entity_id.split('_')[-1] + '. Please enable it in order to make it active.'}}
      - service: input_boolean.turn_off
        data_template:
          entity_id: >-
            {{ 'input_boolean.enabled_front_' + trigger.entity_id.split('_')[-1] }}

  - alias: keymaster_front Reset
    id: keymaster_front Reset
    trigger:
      entity_id: input_boolean.front_reset_lock
      platform: state
      from: "off"
      to: "on"
    action:
      - service: script.keymaster_front_reset_lock
      - service: input_boolean.turn_off
        entity_id: input_boolean.front_reset_lock

  - alias: keymaster_front Decrement Access Count
    id: keymaster_front Decrement Access Count
    trigger:
      platform: event
      event_type: keymaster_lock_state_changed
      event_data:
        lockname: front
    condition:
      - condition: template
        # make sure decrementing access entries is enabled
        value_template: "{{ is_state('input_boolean.accesslimit_front_' + trigger.event.data.code_slot | string, 'on') }}"
      - condition: template
        # Check for Keypad Unlock code
        value_template: >-
          {{
            trigger.event.data.code_slot > 0
            and
            (trigger.event.data.action_code is undefined or trigger.event.data.action_code in (6, 19))
          }}
    action:
      - service: input_number.decrement
        data_template:
          entity_id: "{{ 'input_number.accesscount_front_' + trigger.event.data.code_slot | string }}"

  - alias: keymaster_front_locked
    id: keymaster_front_locked
    trigger:
      entity_id: lock.front
      platform: state
      to: locked
    action:
      - service: timer.cancel
        entity_id: timer.keymaster_front_autolock

  - alias: keymaster_turn_off_retry_front
    id: keymaster_turn_off_retry_front
    trigger:
      entity_id: lock.front
      platform: state
      to: locked
    action:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.keymaster_front_retry

  - alias: keymaster_retry_bolt_closed_front
    id: keymaster_retry_bolt_closed_front
    trigger:
      platform: state
      entity_id: binary_sensor.door_front
      to: "off"
    condition:
      - condition: state
        entity_id: input_boolean.keymaster_front_retry
        state: "on" 
      - condition: state
        entity_id: input_boolean.keymaster_front_autolock
        state: "on"
    action:
      - service: persistent_notification.create
        data_template:
          title: "front is closed"
          message: >-
            {{ 'The front sensor indicates the door has been closed, re-attempting to lock.'}}
      - service: lock.lock
        entity_id: lock.boltchecked_front

  - alias: keymaster_front_opened
    id: keymaster_front_opened
    trigger:
      platform: state
      entity_id: binary_sensor.door_front
      to: "on"
    action:
      - service: timer.start
        data_template:
          entity_id: timer.keymaster_front_autolock
          duration: >
            {% if (((as_timestamp(states.sun.sun.attributes.next_dusk)) > (as_timestamp(states.sun.sun.attributes.next_dawn)))) %}
              {{ states('input_text.keymaster_front_autolock_door_time_night')}}
            {% else %}
              {{ states('input_text.keymaster_front_autolock_door_time_day')}}
            {% endif %}

  - alias: keymaster_front_unlocked_start_autolock
    id: keymaster_front_unlocked_start_autolock
    trigger:
      entity_id: lock.front
      platform: state
      to: unlocked
    condition:
      - condition: state
        entity_id: input_boolean.keymaster_front_autolock
        state: "on"
    action:
      - service: script.turn_on
        entity_id: script.keymaster_front_start_timer
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.keymaster_front_retry

  - alias: keymaster_front_timer_finished
    id: keymaster_front_timer_finished
    condition:
      - condition: state
        entity_id: input_boolean.keymaster_front_autolock
        state: "on"
    trigger:
      platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.keymaster_front_autolock
    action:
      - service: lock.lock
        entity_id: lock.boltchecked_front

  - alias: keymaster_front_timer_canceled
    id: keymaster_front_timer_canceled
    trigger:
      platform: event
      event_type: timer.cancelled
      event_data:
        entity_id: timer.keymaster_front_autolock
    action:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.keymaster_front_retry

  - alias: keymaster_front_disable_auto_lock
    id: keymaster_front_disable_auto_lock
    trigger:
      entity_id: input_boolean.keymaster_front_autolock
      platform: state
      to: "off"
    action:
      - service: timer.cancel
        entity_id:
          - timer.keymaster_front_autolock
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.keymaster_front_retry

  - alias: keymaster_front_enable_auto_lock
    id: keymaster_front_enable_auto_lock
    trigger:
      entity_id: input_boolean.keymaster_front_autolock
      platform: state
      to: "on"
    action:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.keymaster_front_retry
      - service: timer.cancel
        entity_id:
          - timer.keymaster_front_autolock
      - service: script.turn_on
        entity_id: script.keymaster_front_start_timer

###################  timer:  ####################
timer:
  keymaster_front_autolock:
    name: "Auto Lock Timer"

###################  lock:  ####################
lock:
  - platform: template
    name: boltchecked_front
    value_template: "{{ is_state('lock.front', 'locked') }}"
    lock:
      service: "{{ 'script.boltchecked_retry_front' if (is_state('binary_sensor.door_front', 'on')) else 'script.boltchecked_lock_front' }}"
    unlock:
      service: lock.unlock
      data:
        entity_id: lock.front

###############  input_text:  #################
input_text:
  front_lockname:
    initial: front
    name: "Lock Name"

  keymaster_front_autolock_door_time_day:
    name: "Day Auto Lock HH:MM:SS"
    initial: "00:15:00"
  keymaster_front_autolock_door_time_night:
    name: "Night Auto Lock HH:MM:SS"
    initial: "00:05:00"
